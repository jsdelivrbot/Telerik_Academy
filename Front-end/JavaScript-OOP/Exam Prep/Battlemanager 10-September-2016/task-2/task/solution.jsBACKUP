function solve() {
    'use strict';

    const ERROR_MESSAGES = {
        INVALID_NAME_TYPE: 'Name must be string!',
        INVALID_NAME_LENGTH: 'Name must be between between 2 and 20 symbols long!',
        INVALID_NAME_SYMBOLS: 'Name can contain only latin symbols and whitespaces!',
        INVALID_MANA: 'Mana must be a positive integer number!',
        INVALID_EFFECT: 'Effect must be a function with 1 parameter!',
        INVALID_DAMAGE: 'Damage must be a positive number that is at most 100!',
        INVALID_HEALTH: 'Health must be a positive number that is at most 200!',
        INVALID_SPEED: 'Speed must be a positive number that is at most 100!',
        INVALID_COUNT: 'Count must be a positive integer number!',
        INVALID_SPELL_OBJECT: 'Passed objects must be Spell-like objects!',
        NOT_ENOUGH_MANA: 'Not enough mana!',
        TARGET_NOT_FOUND: 'Target not found!',
        INVALID_BATTLE_PARTICIPANT: 'Battle participants must be ArmyUnit-like!'
    };
    const VALIDATOR = {
        isString: function (x) { // === isString(x)
            if (typeof x !== "string") {
                throw  Error(ERROR_MESSAGES.INVALID_NAME_TYPE)
            }
        },
        isInRange: function(x, min, max, err) {
            if(x < min || x > max || Number.isNaN(x)) {
                throw Error(err);
            }
        },
        isLengthInRange2_20: function(x) {
            this.isInRange(x.length, 2, 20, ERROR_MESSAGES.INVALID_NAME_LENGTH);
        },
        isConsistedOfValidSymbols: function(x) {
            if(x.match(/[^a-zA-Z ]/)) {
                throw Error(ERROR_MESSAGES.INVALID_NAME_SYMBOLS);
            }
        },
        isValidMana: function(x) {
            if(typeof x !== 'number' || x <= 0 || Number.isNaN(x)) {
                throw Error(ERROR_MESSAGES.INVALID_MANA);
            }
        },
        isValidEffect: function(x) {
            if(typeof x !== 'function' || x.length !== 1) {
                throw Error(ERROR_MESSAGES.INVALID_EFFECT);
            }
        },
        isValidAlignment: (function() {
            const validAlignments = ['good', 'neutral', 'evil'];
            return function (x) {
                if(validAlignments.indexOf(x) < 0) {
                    throw Error(`Alignment must be good, neutral or evil!`);
                }
            };
        })(),
        isValidDamage: function(x) {
            this.isInRange(x, 0, 100, ERROR_MESSAGES.INVALID_DAMAGE);
        },
        isValidHealth: function(x) {
            this.isInRange(x, 0, 200, ERROR_MESSAGES.INVALID_HEALTH);
        },
        isValidCount: function(x) {
            if((typeof x !== 'number') || (x < 0) || ((x | 0) !== x) || Number.isNaN(x)) {
                throw Error(ERROR_MESSAGES.INVALID_COUNT);
            }
        },
        isValidSpeed: function(x) {
            this.isInRange(x, 0, 100, ERROR_MESSAGES.INVALID_SPEED);
        }
    };
    const getNextId = (function () {
        let counter = 0;
        return function () {
            counter += 1;
            return counter;
        };
    })();

    //////////////////////////////////////////////////////////////////
    /////CLASS SPELL//////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    class Spell {
        constructor(name, manaCost, effect) {
            this.name = name;
            this.manaCost = manaCost;
            this.effect = effect;
        }

        /////NAME//////////////////////////////////////////////////////////////
        get name() {
            return this._name;
        }

        set name(x) {
            VALIDATOR.isString(x);
            VALIDATOR.isLengthInRange2_20(x);
            VALIDATOR.isConsistedOfValidSymbols(x);
            this._name = x;
        }

        /////MANACOST/////////////////////////////////////////////////////////
        get manaCost() {
            return this._manaCost;
        }

        set manaCost(x) {
            VALIDATOR.isValidMana(x);
            this._manaCost = x;
        }

        /////EFFECT/////////////////////////////////////////////////////////
        get effect() {
            return this._effect;
        }

        set effect(x) {
            VALIDATOR.isValidEffect(x);
            this._effect = x;
        }
    }
    //////////////////////////////////////////////////////////////////
    /////CLASS UNIT///////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    class Unit {
        constructor(name, alignment) {
            this._name = name;
            this._alignment = alignment;
        }

        /////NAME/////////////////////////////////////////////////////////
        get name() {
            return this._name;
        }

        set name(x) {
            VALIDATOR.isString(x);
            VALIDATOR.isLengthInRange2_20(x);
            VALIDATOR.isConsistedOfValidSymbols(x);
            this._name = x;
        }

        /////ALIGNMENT/////////////////////////////////////////////////////////
        get alignment() {
            return this._alignment;
        }

        set alignment(x) {
            VALIDATOR.isValidAlignment(x);
            this._alignment = x;
        }
    }
    //////////////////////////////////////////////////////////////////
    /////CLASS ARMY UNIT///////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    class ArmyUnit extends Unit { //extends == inheritance
        constructor(name, alignment, damage, health, count, speed) {
            super(name, alignment); //super keyword is used to call functions on an object's parent.
            this._id = getNextId(); //generates on creation of ArmyUnit
            this._damage = damage;
            this._health = health;
            this._count = count;
            this._speed = speed;
        }

        /////ID/////////////////////////////////////////////////////////////
        get id() {
            return this._id;
        }

        /////DAMAGE/////////////////////////////////////////////////////////
        get damage() {
            return this._damage;
        }

        set damage(x) {
            VALIDATOR.isValidDamage(x);
            this._damage = x;
        }

        /////HEALTH/////////////////////////////////////////////////////////
        get health() {
            return this._health;
        }

        set health(x) {
            VALIDATOR.isValidHealth(x);
            this._health = x;
        }

        /////COUNT/////////////////////////////////////////////////////////
        get count() {
            return this._count;
        }

        set count(x) {
            VALIDATOR.isValidCount(x);
            this._count = x;
        }

        /////SPEED/////////////////////////////////////////////////////////
        get speed() {
            return this._speed;
        }

        set speed(x) {
            VALIDATOR.isValidSpeed(x);
            this._speed = x;
        }
    }
    //////////////////////////////////////////////////////////////////
    /////CLASS COMMANDER///////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    class Commander extends Unit {
        constructor(name, alignment, mana) {
            super(name, alignment); //super keyword is used to call functions on an object's parent.
            this._mana = mana;
            this._spellbook = [];
            this._army = [];
        }

        /////MANA/////////////////////////////////////////////////////////
        get mana() {
            return this._mana;
        }

        set mana(x) {
            VALIDATOR.isValidMana(x);
            this._mana = x;
        }

        /////spellbook/////////////////////////////////////////////////////////
        get spellbook() {
            return this._spellbook;
        }

        set spellbook(x) {
            this._spellbook = x;
        }

        /////army/////////////////////////////////////////////////////////
        get army() {
            return this._army;
        }

        set army(x) {
            this._army = x;
        }
    }
    //////////////////////////////////////////////////////////////////
    /////BATTLE MANAGER///////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////
    //used in addCommanders
    const battlemanagerData = {//object because if only reference value 'commanders' will overshadow parameters (...commanders)
        commanders: [],
        armyUnits: [],
        armyUnitsObj: {}
    };
    Array.prototype.filterByProperty = function (query, propName) { //query = object with property
        if (!query.hasOwnProperty(propName)) {
            return this;
        }
        const value = query[propName];
        return this.filter(x => x[propName] === value);
    };
    const battlemanager = {

        getCommander: function (name, alignment, mana) {
            return new Commander(name, alignment, mana)
        },
        getArmyUnit: function (options) {
            const {name, alignment, damage, health, count, speed} = options; //destructuring assignment
            const unit =  new ArmyUnit(name, alignment, damage, health, count, speed);
            battlemanagerData.armyUnits.push(unit) ;
            battlemanagerData.armyUnitsObj.push[unit.id]= unit;
            return unit;
        },
        getSpell: function (name, manaCost, effect) {
            return new Spell(name, manaCost, effect);
        },
        addCommanders: function (...commanders) {
            battlemanagerData.commanders.push(...commanders);
            return this;
        },
        addArmyUnitTo: function (commanderName, armyUnit) {
            //TODO: check if commander is not found
            battlemanagerData.commanders
                .find(c => c.name === commanderName)
                .army.push(armyUnit);
            return this; //should enable chaining
        },
        addSpellsTo: function (commanderName, ...spells) {
            try {  // Ujas
                battlemanagerData.commanders
                    .find(c => c.name === commanderName)
                    .spellbook.push(...(spells.map(s => new Spell(s.name, s.manaCost, s.effect))));
            }
            catch(e) {
                throw Error(ERROR_MESSAGES.INVALID_SPELL_OBJECT);
            }
            return this; //should enable chaining
        },
        findCommanders: function (query) {
            return battlemanagerData.commanders
                .slice()//за да сме сейф правим копие
                .filterByProperty(query, 'name')
                .filterByProperty(query, 'alignment')
                .sort(function (a, b) {
                    var nameA = a.name.toUpperCase(); // ignore upper and lowercase
                    var nameB = b.name.toUpperCase(); // ignore upper and lowercase
                    if (nameA < nameB) {
                        return -1;
                    }
                    if (nameA > nameB) {
                        return 1;
                    }
                    // names must be equal
                    return 0;
                });
        },
        findArmyUnitById: function(id) {
            return battlemanagerData.armyUnitsObj[id];
        },
        findArmyUnits: function(query) {
            return battlemanagerData.armyUnits
                .slice()
                .filterByProperty(query, 'id')
                .filterByProperty(query, 'name')
                .filterByProperty(query, 'alignment')
                .sort((x, y) => {
                    const cmp = y.speed - x.speed;
                    if(cmp === 0) {
                        return x.name.localeCompare(y.name);
                    }
                    return cmp;
                });
        },
        spellcast: function (casterName, spellName, targetUnitId) {

        },
        battle: function (attacker, defender) {

        },
    };

    return battlemanager;
}
module.exports = solve;